// Code generated by goyacc -o parser.go -p Dolang parser.y. DO NOT EDIT.

//line parser.y:1

package parser

import __yyfmt__ "fmt"

//line parser.y:3

import "fmt"

var IF_Label = NewLabelStack()
var WHILE_Label = NewLabelStack()

//line parser.y:11
type DolangSymType struct {
	yys  int
	val  interface{}
	code string
}

const LexError = 57346
const Identifier = 57347
const StringConstant = 57348
const NumConstant = 57349
const FuncDefined = 57350
const FuncReturn = 57351
const GenDefined = 57352
const CoroDefined = 57353
const T_IF = 57354
const T_ELSE = 57355
const T_THEN = 57356
const T_TRUE = 57357
const T_FALSE = 57358
const T_GOTO = 57359
const T_FOR = 57360
const T_WHILE = 57361
const T_DO = 57362
const T_BREAK = 57363
const T_EQ = 57364
const T_AND = 57365
const T_OR = 57366
const T_XOR = 57367
const T_GE = 57368
const T_LE = 57369
const T_VAR = 57370
const T_NULL = 57371
const T_YIELD = 57372
const UMINUS = 57373

var DolangToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LexError",
	"Identifier",
	"StringConstant",
	"NumConstant",
	"FuncDefined",
	"FuncReturn",
	"GenDefined",
	"CoroDefined",
	"T_IF",
	"T_ELSE",
	"T_THEN",
	"T_TRUE",
	"T_FALSE",
	"T_GOTO",
	"T_FOR",
	"T_WHILE",
	"T_DO",
	"T_BREAK",
	"T_EQ",
	"T_AND",
	"T_OR",
	"T_XOR",
	"T_GE",
	"T_LE",
	"T_VAR",
	"T_NULL",
	"T_YIELD",
	"'='",
	"'|'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'<'",
	"'>'",
	"UMINUS",
	"';'",
	"':'",
	"','",
	"'.'",
	"'('",
	"')'",
	"'{'",
	"'}'",
	"'!'",
}
var DolangStatenames = [...]string{}

const DolangEofCode = 1
const DolangErrCode = 2
const DolangInitialStackSize = 16

//line yacctab:1
var DolangExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 5,
	14, 38,
	-2, 6,
	-1, 13,
	14, 74,
	22, 74,
	23, 74,
	24, 74,
	25, 74,
	34, 74,
	36, 74,
	37, 74,
	38, 74,
	39, 74,
	40, 74,
	-2, 36,
	-1, 64,
	14, 38,
	-2, 65,
	-1, 84,
	14, 38,
	-2, 28,
	-1, 85,
	14, 38,
	-2, 29,
	-1, 88,
	48, 50,
	-2, 38,
	-1, 94,
	14, 38,
	-2, 57,
	-1, 95,
	14, 38,
	-2, 58,
	-1, 96,
	14, 38,
	-2, 59,
	-1, 97,
	14, 38,
	-2, 60,
	-1, 98,
	14, 38,
	-2, 61,
	-1, 99,
	14, 38,
	-2, 62,
	-1, 100,
	14, 38,
	-2, 63,
	-1, 101,
	14, 38,
	-2, 64,
	-1, 102,
	14, 38,
	-2, 66,
	-1, 103,
	14, 38,
	-2, 67,
	-1, 104,
	14, 38,
	-2, 68,
	-1, 107,
	47, 91,
	-2, 38,
	-1, 114,
	14, 38,
	-2, 23,
	-1, 139,
	14, 38,
	-2, 24,
	-1, 150,
	48, 49,
	-2, 78,
	-1, 156,
	14, 38,
	-2, 35,
	-1, 157,
	14, 38,
	-2, 34,
	-1, 163,
	14, 38,
	-2, 41,
}

const DolangPrivate = 57344

const DolangLast = 367

var DolangAct = [...]int{

	173, 66, 65, 13, 12, 13, 12, 5, 13, 12,
	148, 106, 168, 4, 63, 64, 92, 119, 111, 128,
	62, 105, 183, 182, 180, 72, 178, 57, 58, 59,
	60, 57, 58, 59, 60, 176, 152, 149, 170, 50,
	51, 52, 53, 54, 56, 55, 167, 84, 85, 88,
	88, 61, 150, 61, 162, 61, 159, 161, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 107,
	57, 58, 59, 60, 57, 58, 59, 60, 90, 107,
	158, 145, 142, 114, 52, 53, 54, 56, 55, 138,
	124, 56, 55, 112, 61, 126, 117, 134, 61, 123,
	80, 35, 34, 32, 36, 39, 37, 75, 47, 122,
	118, 8, 9, 44, 78, 48, 43, 45, 81, 76,
	79, 77, 109, 139, 46, 10, 40, 71, 117, 108,
	70, 33, 143, 133, 86, 140, 141, 137, 151, 83,
	144, 81, 17, 107, 175, 156, 7, 155, 157, 153,
	154, 13, 12, 160, 163, 79, 93, 63, 130, 131,
	132, 13, 12, 165, 13, 12, 74, 121, 73, 13,
	12, 136, 13, 12, 116, 171, 110, 89, 91, 1,
	177, 26, 184, 179, 15, 181, 35, 34, 32, 36,
	39, 37, 25, 47, 120, 14, 8, 9, 44, 24,
	48, 43, 45, 169, 11, 2, 29, 49, 166, 46,
	10, 40, 127, 42, 23, 174, 33, 164, 125, 67,
	34, 32, 68, 3, 69, 41, 22, 17, 172, 8,
	9, 7, 146, 82, 38, 67, 34, 32, 68, 16,
	69, 19, 31, 10, 115, 8, 9, 30, 21, 33,
	20, 67, 34, 32, 68, 28, 69, 27, 18, 10,
	17, 8, 9, 6, 7, 33, 129, 0, 0, 0,
	57, 58, 59, 60, 0, 10, 17, 0, 0, 0,
	7, 33, 50, 51, 52, 53, 54, 56, 55, 147,
	0, 0, 87, 0, 61, 113, 7, 0, 57, 58,
	59, 60, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 51, 52, 53, 54, 56, 55, 57, 58, 59,
	60, 0, 61, 0, 0, 0, 0, 0, 0, 50,
	51, 52, 53, 54, 56, 55, 0, 0, 0, 135,
	0, 61, 57, 58, 59, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 51, 52, 53, 54, 56,
	55, 0, 0, 0, 0, 0, 61,
}
var DolangPact = [...]int{

	-1000, 181, -1000, 96, -1000, 320, 96, 230, -1000, -1000,
	-1000, -1000, 85, 81, -1000, -1000, -1000, 230, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 161, -1000, 76, 109, 95, 125, 230,
	230, 246, 246, 30, 173, -1000, 151, -1000, -1000, -1000,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, -1000, 320, 320, 84, 81, 77, 74, 72,
	171, 230, 248, -1000, -1000, 214, -1000, 169, 64, 162,
	63, 162, 230, -1000, 320, 320, -1000, 230, 320, -1000,
	153, -1000, -1000, 89, 48, 48, 52, 52, 52, 9,
	9, 7, 7, 7, 7, 50, -1000, 295, 166, 166,
	106, -1000, 42, -1000, 320, 230, 104, -1000, 162, 35,
	88, -1000, 162, 34, 276, -11, 5, -11, -13, 153,
	-1000, -1000, -1000, 151, -1000, 230, -1000, 230, -1000, 320,
	230, 33, 8, 148, 10, 6, 230, -1000, -1000, 96,
	-1000, -1000, -1000, -1000, -1000, -1000, 320, 320, -2, 96,
	-1000, -10, 96, 320, 131, -14, -1000, 96, -23, -1000,
	96, -25, -1000, -1000, -11, -1000, -1000, -26, -1000, -27,
	-1000, -1000, -1000, -1000, -1000,
}
var DolangPgo = [...]int{

	0, 266, 13, 263, 258, 257, 255, 250, 248, 247,
	16, 242, 241, 239, 234, 233, 232, 228, 226, 225,
	218, 217, 0, 215, 134, 10, 214, 213, 212, 208,
	206, 7, 2, 18, 204, 1, 21, 11, 199, 195,
	17, 194, 12, 192, 184, 181, 19, 203, 179,
}
var DolangR1 = [...]int{

	0, 48, 48, 48, 47, 47, 47, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 5, 6, 7, 7, 8,
	9, 10, 10, 10, 11, 11, 12, 13, 14, 15,
	16, 17, 18, 18, 19, 20, 21, 22, 23, 24,
	24, 25, 26, 27, 28, 29, 30, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 32,
	32, 32, 33, 34, 34, 34, 34, 35, 35, 36,
	36, 37, 37, 38, 39, 40, 40, 41, 41, 42,
	43, 44, 45, 46, 46, 1, 1, 1,
}
var DolangR2 = [...]int{

	0, 0, 2, 3, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 2, 2, 1, 2, 2,
	2, 0, 1, 3, 5, 5, 1, 6, 1, 1,
	1, 0, 6, 8, 1, 0, 0, 0, 1, 3,
	1, 3, 5, 1, 0, 0, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 2, 2, 1, 4, 4, 0,
	1, 1, 3, 8, 7, 0, 1, 1, 3, 1,
	8, 7, 4, 0, 2, 1, 1, 1,
}
var DolangChk = [...]int{

	-1000, -48, -47, 42, -2, -31, -3, 50, 15, 16,
	29, -34, -32, -35, -39, -44, -13, 46, -4, -12,
	-7, -8, -18, -26, -38, -43, -45, -5, -6, -30,
	-9, -11, 7, 35, 6, 5, 8, 10, -14, 9,
	30, -19, -27, 20, 17, 21, 28, 12, 19, -47,
	34, 35, 36, 37, 38, 40, 39, 22, 23, 24,
	25, 46, -2, -31, -31, -32, -35, 5, 8, 10,
	45, 46, -31, 7, 5, 31, 43, 45, 5, 46,
	5, 46, -15, 14, -31, -31, -24, 46, -31, -24,
	48, 5, -10, 5, -31, -31, -31, -31, -31, -31,
	-31, -31, -31, -31, -31, -36, -37, -31, 45, 45,
	5, -33, -36, 47, -31, 30, 5, -33, 46, -40,
	-41, 5, 46, -40, -31, -20, -31, -28, -46, -1,
	5, 6, 7, 44, 47, 44, 5, 31, 47, -31,
	31, -40, 47, 44, -40, 47, -16, 13, -25, 48,
	47, -25, 49, -46, -10, -37, -31, -31, 47, 48,
	5, 47, 48, -31, -21, -2, -29, 48, -42, -47,
	48, -42, -17, -22, -23, 13, 49, -42, 49, -42,
	49, -25, 49, 49, -22,
}
var DolangDef = [...]int{

	1, -2, 2, 4, 5, -2, 7, 0, 69, 70,
	71, 72, 73, -2, 75, 76, 77, 0, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 83, 0, 86, 79, 0, 0, 0, 27,
	0, 0, 0, 0, 0, 56, 31, 44, 53, 3,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 8, 38, -2, 73, 74, 79, 0, 0,
	0, 89, 38, 84, 85, 0, 25, 0, 0, 95,
	0, 95, 0, 39, -2, -2, 45, 0, -2, 54,
	103, 26, 30, 32, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 0, 90, -2, 0, 0,
	82, 81, 0, 78, -2, 0, 82, 80, 95, 0,
	96, 97, 95, 0, 38, 0, 38, 0, 0, 103,
	105, 106, 107, 31, 87, 0, 82, 0, 88, -2,
	0, 0, 0, 0, 0, 0, 0, 40, 46, 7,
	-2, 55, 102, 104, 33, 92, -2, -2, 0, 4,
	98, 0, 4, -2, 47, 0, 52, 4, 0, 99,
	4, 0, 37, 42, 0, 48, 51, 0, 94, 0,
	101, 47, 93, 100, 43,
}
var DolangTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 50, 3, 3, 3, 38, 33, 3,
	46, 47, 36, 34, 44, 35, 45, 37, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 43, 42,
	39, 31, 40, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 48, 32, 49,
}
var DolangTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 41,
}
var DolangTok3 = [...]int{
	0,
}

var DolangErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	DolangDebug        = 0
	DolangErrorVerbose = false
)

type DolangLexer interface {
	Lex(lval *DolangSymType) int
	Error(s string)
}

type DolangParser interface {
	Parse(DolangLexer) int
	Lookahead() int
}

type DolangParserImpl struct {
	lval  DolangSymType
	stack [DolangInitialStackSize]DolangSymType
	char  int
}

func (p *DolangParserImpl) Lookahead() int {
	return p.char
}

func DolangNewParser() DolangParser {
	return &DolangParserImpl{}
}

const DolangFlag = -1000

func DolangTokname(c int) string {
	if c >= 1 && c-1 < len(DolangToknames) {
		if DolangToknames[c-1] != "" {
			return DolangToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func DolangStatname(s int) string {
	if s >= 0 && s < len(DolangStatenames) {
		if DolangStatenames[s] != "" {
			return DolangStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func DolangErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !DolangErrorVerbose {
		return "syntax error"
	}

	for _, e := range DolangErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + DolangTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := DolangPact[state]
	for tok := TOKSTART; tok-1 < len(DolangToknames); tok++ {
		if n := base + tok; n >= 0 && n < DolangLast && DolangChk[DolangAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if DolangDef[state] == -2 {
		i := 0
		for DolangExca[i] != -1 || DolangExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; DolangExca[i] >= 0; i += 2 {
			tok := DolangExca[i]
			if tok < TOKSTART || DolangExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if DolangExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += DolangTokname(tok)
	}
	return res
}

func Dolanglex1(lex DolangLexer, lval *DolangSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = DolangTok1[0]
		goto out
	}
	if char < len(DolangTok1) {
		token = DolangTok1[char]
		goto out
	}
	if char >= DolangPrivate {
		if char < DolangPrivate+len(DolangTok2) {
			token = DolangTok2[char-DolangPrivate]
			goto out
		}
	}
	for i := 0; i < len(DolangTok3); i += 2 {
		token = DolangTok3[i+0]
		if token == char {
			token = DolangTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = DolangTok2[1] /* unknown char */
	}
	if DolangDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", DolangTokname(token), uint(char))
	}
	return char, token
}

func DolangParse(Dolanglex DolangLexer) int {
	return DolangNewParser().Parse(Dolanglex)
}

func (Dolangrcvr *DolangParserImpl) Parse(Dolanglex DolangLexer) int {
	var Dolangn int
	var DolangVAL DolangSymType
	var DolangDollar []DolangSymType
	_ = DolangDollar // silence set and not used
	DolangS := Dolangrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Dolangstate := 0
	Dolangrcvr.char = -1
	Dolangtoken := -1 // Dolangrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Dolangstate = -1
		Dolangrcvr.char = -1
		Dolangtoken = -1
	}()
	Dolangp := -1
	goto Dolangstack

ret0:
	return 0

ret1:
	return 1

Dolangstack:
	/* put a state and value onto the stack */
	if DolangDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", DolangTokname(Dolangtoken), DolangStatname(Dolangstate))
	}

	Dolangp++
	if Dolangp >= len(DolangS) {
		nyys := make([]DolangSymType, len(DolangS)*2)
		copy(nyys, DolangS)
		DolangS = nyys
	}
	DolangS[Dolangp] = DolangVAL
	DolangS[Dolangp].yys = Dolangstate

Dolangnewstate:
	Dolangn = DolangPact[Dolangstate]
	if Dolangn <= DolangFlag {
		goto Dolangdefault /* simple state */
	}
	if Dolangrcvr.char < 0 {
		Dolangrcvr.char, Dolangtoken = Dolanglex1(Dolanglex, &Dolangrcvr.lval)
	}
	Dolangn += Dolangtoken
	if Dolangn < 0 || Dolangn >= DolangLast {
		goto Dolangdefault
	}
	Dolangn = DolangAct[Dolangn]
	if DolangChk[Dolangn] == Dolangtoken { /* valid shift */
		Dolangrcvr.char = -1
		Dolangtoken = -1
		DolangVAL = Dolangrcvr.lval
		Dolangstate = Dolangn
		if Errflag > 0 {
			Errflag--
		}
		goto Dolangstack
	}

Dolangdefault:
	/* default state action */
	Dolangn = DolangDef[Dolangstate]
	if Dolangn == -2 {
		if Dolangrcvr.char < 0 {
			Dolangrcvr.char, Dolangtoken = Dolanglex1(Dolanglex, &Dolangrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if DolangExca[xi+0] == -1 && DolangExca[xi+1] == Dolangstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Dolangn = DolangExca[xi+0]
			if Dolangn < 0 || Dolangn == Dolangtoken {
				break
			}
		}
		Dolangn = DolangExca[xi+1]
		if Dolangn < 0 {
			goto ret0
		}
	}
	if Dolangn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Dolanglex.Error(DolangErrorMessage(Dolangstate, Dolangtoken))
			Nerrs++
			if DolangDebug >= 1 {
				__yyfmt__.Printf("%s", DolangStatname(Dolangstate))
				__yyfmt__.Printf(" saw %s\n", DolangTokname(Dolangtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Dolangp >= 0 {
				Dolangn = DolangPact[DolangS[Dolangp].yys] + DolangErrCode
				if Dolangn >= 0 && Dolangn < DolangLast {
					Dolangstate = DolangAct[Dolangn] /* simulate a shift of "error" */
					if DolangChk[Dolangstate] == DolangErrCode {
						goto Dolangstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if DolangDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", DolangS[Dolangp].yys)
				}
				Dolangp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if DolangDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", DolangTokname(Dolangtoken))
			}
			if Dolangtoken == DolangEofCode {
				goto ret1
			}
			Dolangrcvr.char = -1
			Dolangtoken = -1
			goto Dolangnewstate /* try again in the same state */
		}
	}

	/* reduction by production Dolangn */
	if DolangDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Dolangn, DolangStatname(Dolangstate))
	}

	Dolangnt := Dolangn
	Dolangpt := Dolangp
	_ = Dolangpt // guard against "declared and not used"

	Dolangp -= DolangR2[Dolangn]
	// Dolangp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if Dolangp+1 >= len(DolangS) {
		nyys := make([]DolangSymType, len(DolangS)*2)
		copy(nyys, DolangS)
		DolangS = nyys
	}
	DolangVAL = DolangS[Dolangp+1]

	/* consult goto table to find next state */
	Dolangn = DolangR1[Dolangn]
	Dolangg := DolangPgo[Dolangn]
	Dolangj := Dolangg + DolangS[Dolangp].yys + 1

	if Dolangj >= DolangLast {
		Dolangstate = DolangAct[Dolangg]
	} else {
		Dolangstate = DolangAct[Dolangj]
		if DolangChk[Dolangstate] != -Dolangn {
			Dolangstate = DolangAct[Dolangg]
		}
	}
	// dummy call; replaced with literal code
	switch Dolangnt {

	case 2:
		DolangDollar = DolangS[Dolangpt-2 : Dolangpt+1]
//line parser.y:40
		{
			fmt.Fprintf(&ParserBuf, DolangDollar[2].code)
		}
	case 3:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:41
		{
			fmt.Fprintf(&ParserBuf, DolangDollar[3].code)
		}
	case 4:
		DolangDollar = DolangS[Dolangpt-0 : Dolangpt+1]
//line parser.y:44
		{
			DolangVAL.code = ""
		}
	case 5:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:45
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 6:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:46
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 7:
		DolangDollar = DolangS[Dolangpt-0 : Dolangpt+1]
//line parser.y:49
		{
			DolangVAL.code = ""
		}
	case 8:
		DolangDollar = DolangS[Dolangpt-2 : Dolangpt+1]
//line parser.y:50
		{
			DolangVAL.code = fmt.Sprintf("%v %v", DolangDollar[1].code, DolangDollar[2].code)
		}
	case 9:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:53
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 10:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:54
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 11:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:55
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 12:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:56
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 13:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:57
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 14:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:58
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 15:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:59
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 16:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:60
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 17:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:61
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 18:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:62
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 19:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:63
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 20:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:64
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 21:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:65
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 22:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:66
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 23:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:70
		{
			DolangVAL.code = fmt.Sprintf("'%v' %v store", DolangDollar[1].val, DolangDollar[3].code)
		}
	case 24:
		DolangDollar = DolangS[Dolangpt-4 : Dolangpt+1]
//line parser.y:71
		{
			DolangVAL.code = fmt.Sprintf("%v ret '%v' arg", DolangDollar[4].code, DolangDollar[1].val)
		}
	case 25:
		DolangDollar = DolangS[Dolangpt-2 : Dolangpt+1]
//line parser.y:75
		{
			DolangVAL.code = fmt.Sprintf("%v:", DolangDollar[1].val)
		}
	case 26:
		DolangDollar = DolangS[Dolangpt-2 : Dolangpt+1]
//line parser.y:79
		{
			DolangVAL.code = fmt.Sprintf("&%v jmp", DolangDollar[2].val)
		}
	case 27:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:83
		{
			DolangVAL.code = "ret"
		}
	case 28:
		DolangDollar = DolangS[Dolangpt-2 : Dolangpt+1]
//line parser.y:84
		{
			DolangVAL.code = fmt.Sprintf("%v ret", DolangDollar[2].code)
		}
	case 29:
		DolangDollar = DolangS[Dolangpt-2 : Dolangpt+1]
//line parser.y:88
		{
			DolangVAL.code = fmt.Sprintf("%v ret", DolangDollar[2].code)
		}
	case 30:
		DolangDollar = DolangS[Dolangpt-2 : Dolangpt+1]
//line parser.y:92
		{
			DolangVAL.code = DolangDollar[2].code
		}
	case 31:
		DolangDollar = DolangS[Dolangpt-0 : Dolangpt+1]
//line parser.y:95
		{
			DolangVAL.code = ""
		}
	case 32:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:96
		{
			DolangVAL.code = fmt.Sprintf("'%v' nop storei", DolangDollar[1].val)
		}
	case 33:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:97
		{
			DolangVAL.code = fmt.Sprintf("'%v' nop storei %v", DolangDollar[1].val, DolangDollar[3].code)
		}
	case 34:
		DolangDollar = DolangS[Dolangpt-5 : Dolangpt+1]
//line parser.y:102
		{
			DolangVAL.code = fmt.Sprintf("'set' '%v' %v '%v' load call", DolangDollar[3].val, DolangDollar[5].code, DolangDollar[1].val)
		}
	case 35:
		DolangDollar = DolangS[Dolangpt-5 : Dolangpt+1]
//line parser.y:106
		{
			DolangVAL.code = fmt.Sprintf("'set' '%v' %v '%v' load call", DolangDollar[3].val, DolangDollar[5].code, DolangDollar[1].code)
		}
	case 36:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:112
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 37:
		DolangDollar = DolangS[Dolangpt-6 : Dolangpt+1]
//line parser.y:117
		{
			DolangVAL.code = fmt.Sprintf("%v %v %v %v %v %v", DolangDollar[1].code, DolangDollar[2].code, DolangDollar[3].code, DolangDollar[4].code, DolangDollar[5].code, DolangDollar[6].code)
		}
	case 38:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:123
		{
			IF_Label.BEG()
			DolangVAL.code = DolangDollar[1].code
		}
	case 39:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:130
		{
			DolangVAL.code = fmt.Sprintf("&_THEN_END%v fjmp", IF_Label.Topv())
		}
	case 40:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:136
		{
			DolangVAL.code = fmt.Sprintf("&_IF_END%v jmp", IF_Label.Topv()) + fmt.Sprintf("_THEN_END%v:", IF_Label.Topv())
		}
	case 41:
		DolangDollar = DolangS[Dolangpt-0 : Dolangpt+1]
//line parser.y:142
		{
			DolangVAL.code = fmt.Sprintf("_IF_END%v:", IF_Label.Topv())
			IF_Label.END()
		}
	case 42:
		DolangDollar = DolangS[Dolangpt-6 : Dolangpt+1]
//line parser.y:150
		{
			DolangVAL.code = fmt.Sprintf("%v %v %v %v %v", DolangDollar[2].code, DolangDollar[3].code, DolangDollar[4].code, DolangDollar[5].code, DolangDollar[6].code)
		}
	case 43:
		DolangDollar = DolangS[Dolangpt-8 : Dolangpt+1]
//line parser.y:154
		{
			DolangVAL.code = fmt.Sprintf("%v %v %v %v %v %v %v", DolangDollar[2].code, DolangDollar[3].code, DolangDollar[4].code, DolangDollar[5].code, DolangDollar[6].code, DolangDollar[7].code, DolangDollar[8].code)
		}
	case 44:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:160
		{
			IF_Label.BEG()
		}
	case 45:
		DolangDollar = DolangS[Dolangpt-0 : Dolangpt+1]
//line parser.y:164
		{
			DolangVAL.code = fmt.Sprintf("&_THEN_END%v fjmp", IF_Label.Topv())
		}
	case 46:
		DolangDollar = DolangS[Dolangpt-0 : Dolangpt+1]
//line parser.y:170
		{
			DolangVAL.code = fmt.Sprintf("&_IF_END%v jmp ", IF_Label.Topv()) + fmt.Sprintf("_THEN_END%v:", IF_Label.Topv())
		}
	case 47:
		DolangDollar = DolangS[Dolangpt-0 : Dolangpt+1]
//line parser.y:176
		{
			DolangVAL.code = fmt.Sprintf("_IF_END%v:", IF_Label.Topv())
			IF_Label.END()
		}
	case 48:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:183
		{
			DolangVAL.code = fmt.Sprintf("_ELSE_BEG%v:", IF_Label.Topv())
		}
	case 49:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:189
		{
			DolangVAL.code = DolangDollar[2].code
		}
	case 50:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:190
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 51:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:194
		{
			DolangVAL.code = DolangDollar[2].code
		}
	case 52:
		DolangDollar = DolangS[Dolangpt-5 : Dolangpt+1]
//line parser.y:199
		{
			DolangVAL.code = fmt.Sprintf("%v %v %v %v %v", DolangDollar[1].code, DolangDollar[2].code, DolangDollar[3].code, DolangDollar[4].code, DolangDollar[5].code)
		}
	case 53:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:205
		{
			WHILE_Label.BEG()
			DolangVAL.code = fmt.Sprintf("_WHILE_BEG%v:", WHILE_Label.Topv())
		}
	case 54:
		DolangDollar = DolangS[Dolangpt-0 : Dolangpt+1]
//line parser.y:212
		{
			DolangVAL.code = fmt.Sprintf("&_WHILE_END%v fjmp", WHILE_Label.Topv())
		}
	case 55:
		DolangDollar = DolangS[Dolangpt-0 : Dolangpt+1]
//line parser.y:218
		{
			DolangVAL.code = fmt.Sprintf("&_WHILE_BEG%v jmp ", WHILE_Label.Topv()) + fmt.Sprintf("_WHILE_END%v:", WHILE_Label.Topv())
			WHILE_Label.END()
		}
	case 56:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:225
		{
			DolangVAL.code = fmt.Sprintf("&_WHILE_END%v jmp", WHILE_Label.Topv())
		}
	case 57:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:230
		{
			DolangVAL.code = fmt.Sprintf("%v %v add", DolangDollar[1].code, DolangDollar[3].code)
		}
	case 58:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:231
		{
			DolangVAL.code = fmt.Sprintf("%v %v sub", DolangDollar[1].code, DolangDollar[3].code)
		}
	case 59:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:232
		{
			DolangVAL.code = fmt.Sprintf("%v %v mul", DolangDollar[1].code, DolangDollar[3].code)
		}
	case 60:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:233
		{
			DolangVAL.code = fmt.Sprintf("%v %v div", DolangDollar[1].code, DolangDollar[3].code)
		}
	case 61:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:234
		{
			DolangVAL.code = fmt.Sprintf("%v %v mod", DolangDollar[1].code, DolangDollar[3].code)
		}
	case 62:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:235
		{
			DolangVAL.code = fmt.Sprintf("%v %v great", DolangDollar[1].code, DolangDollar[3].code)
		}
	case 63:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:236
		{
			DolangVAL.code = fmt.Sprintf("%v %v less", DolangDollar[1].code, DolangDollar[3].code)
		}
	case 64:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:237
		{
			DolangVAL.code = fmt.Sprintf("%v %v equl", DolangDollar[1].code, DolangDollar[3].code)
		}
	case 65:
		DolangDollar = DolangS[Dolangpt-2 : Dolangpt+1]
//line parser.y:238
		{
			DolangVAL.code = fmt.Sprintf("%v not", DolangDollar[2].code)
		}
	case 66:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:239
		{
			DolangVAL.code = fmt.Sprintf("%v %v and", DolangDollar[1].code, DolangDollar[3].code)
		}
	case 67:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:240
		{
			DolangVAL.code = fmt.Sprintf("%v %v or", DolangDollar[1].code, DolangDollar[3].code)
		}
	case 68:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:241
		{
			DolangVAL.code = fmt.Sprintf("%v %v xor", DolangDollar[1].code, DolangDollar[3].code)
		}
	case 69:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:242
		{
			DolangVAL.code = "1"
		}
	case 70:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:243
		{
			DolangVAL.code = "0"
		}
	case 71:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:244
		{
			DolangVAL.code = "nop"
		}
	case 72:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:245
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 73:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:246
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 74:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:247
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 75:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:248
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 76:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:249
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 77:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:250
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 78:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:251
		{
			DolangVAL.code = DolangDollar[2].code
		}
	case 79:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:255
		{
			DolangVAL.code = fmt.Sprintf("'%v' load", DolangDollar[1].val)
		}
	case 80:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:256
		{
			DolangVAL.code = fmt.Sprintf("'get' '%v' '%v' load call", DolangDollar[3].code, DolangDollar[1].val)
		}
	case 81:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:257
		{
			DolangVAL.code = fmt.Sprintf("'get' '%v' '%v' call", DolangDollar[3].code, DolangDollar[1].code)
		}
	case 82:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:261
		{
			DolangVAL.code = DolangDollar[1].val.(string)
		}
	case 83:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:265
		{
			DolangVAL.code = fmt.Sprintf("%v", DolangDollar[1].val)
		}
	case 84:
		DolangDollar = DolangS[Dolangpt-2 : Dolangpt+1]
//line parser.y:266
		{
			DolangVAL.code = fmt.Sprintf("-%v", DolangDollar[2].val)
		}
	case 85:
		DolangDollar = DolangS[Dolangpt-2 : Dolangpt+1]
//line parser.y:267
		{
			DolangVAL.code = fmt.Sprintf("'%v' laod neg", DolangDollar[2].val)
		}
	case 86:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:268
		{
			DolangVAL.code = "'" + DolangDollar[1].val.(string) + "'"
		}
	case 87:
		DolangDollar = DolangS[Dolangpt-4 : Dolangpt+1]
//line parser.y:272
		{
			DolangVAL.code = fmt.Sprintf("%v %v call", DolangDollar[3].code, DolangDollar[1].code)
		}
	case 88:
		DolangDollar = DolangS[Dolangpt-4 : Dolangpt+1]
//line parser.y:273
		{
			DolangVAL.code = fmt.Sprintf("%v %v call", DolangDollar[3].code, DolangDollar[1].code)
		}
	case 89:
		DolangDollar = DolangS[Dolangpt-0 : Dolangpt+1]
//line parser.y:277
		{
			DolangVAL.code = ""
		}
	case 90:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:278
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 91:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:282
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 92:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:283
		{
			DolangVAL.code = fmt.Sprintf("%v %v", DolangDollar[1].code, DolangDollar[3].code)
		}
	case 93:
		DolangDollar = DolangS[Dolangpt-8 : Dolangpt+1]
//line parser.y:288
		{
			sr := "stack_reverse"
			if argCount(DolangDollar[4].code) <= 1 {
				sr = ""
			}
			DolangVAL.code = fmt.Sprintf("'%v' func %v %v %v endfunc storei", DolangDollar[2].val, sr, DolangDollar[4].code, DolangDollar[7].code)
		}
	case 94:
		DolangDollar = DolangS[Dolangpt-7 : Dolangpt+1]
//line parser.y:299
		{
			sr := "stack_reverse"
			if argCount(DolangDollar[3].code) <= 1 {
				sr = ""
			}
			DolangVAL.code = fmt.Sprintf("func %v %v %v endfunc", sr, DolangDollar[3].code, DolangDollar[6].code)
		}
	case 95:
		DolangDollar = DolangS[Dolangpt-0 : Dolangpt+1]
//line parser.y:309
		{
			DolangVAL.code = ""
		}
	case 96:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:310
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 97:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:314
		{
			DolangVAL.code = fmt.Sprintf("'%v' arg", DolangDollar[1].val)
		}
	case 98:
		DolangDollar = DolangS[Dolangpt-3 : Dolangpt+1]
//line parser.y:315
		{
			DolangVAL.code = fmt.Sprintf("%v '%v' arg", DolangDollar[1].code, DolangDollar[3].val)
		}
	case 99:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:319
		{
			DolangVAL.code = DolangDollar[1].code
		}
	case 100:
		DolangDollar = DolangS[Dolangpt-8 : Dolangpt+1]
//line parser.y:324
		{
			DolangVAL.code = fmt.Sprintf(
				"'%v' func '__gen__' func %v %v endfunc storei func '__gen__' load callx endfunc ret endfunc storei",
				DolangDollar[2].val, DolangDollar[4].code, DolangDollar[7].code)
		}
	case 101:
		DolangDollar = DolangS[Dolangpt-7 : Dolangpt+1]
//line parser.y:333
		{
			/*
				func
					'__gen__' func
					//...
					endfunc store
					func
						'__gen__' load callx
					endfunc ret
				endfunc
			*/
			DolangVAL.code = fmt.Sprintf(
				"func '__gen__' func %v %v endfunc storei func '__gen__' load callx endfunc ret endfunc storei",
				DolangDollar[1].val, DolangDollar[3].code, DolangDollar[6].code)
		}
	case 102:
		DolangDollar = DolangS[Dolangpt-4 : Dolangpt+1]
//line parser.y:351
		{
			DolangVAL.code = DolangDollar[3].code
		}
	case 103:
		DolangDollar = DolangS[Dolangpt-0 : Dolangpt+1]
//line parser.y:357
		{
			DolangVAL.code = ""
		}
	case 104:
		DolangDollar = DolangS[Dolangpt-2 : Dolangpt+1]
//line parser.y:358
		{
			DolangVAL.code = fmt.Sprintf("%v %v", DolangDollar[1].val, DolangDollar[2].code)
		}
	case 105:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:362
		{
			DolangVAL.val = DolangDollar[1].val.(string)
		}
	case 106:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:363
		{
			DolangVAL.val = "'" + DolangDollar[1].val.(string) + "'"
		}
	case 107:
		DolangDollar = DolangS[Dolangpt-1 : Dolangpt+1]
//line parser.y:364
		{
			DolangVAL.val = fmtFloat64(DolangDollar[1].val.(float64))
		}
	}
	goto Dolangstack /* stack new state and value */
}
